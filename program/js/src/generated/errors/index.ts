/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

type ErrorWithCode = Error & { code: number }
type MaybeErrorWithCode = ErrorWithCode | null | undefined

const createErrorFromCodeLookup: Map<number, () => ErrorWithCode> = new Map()
const createErrorFromNameLookup: Map<string, () => ErrorWithCode> = new Map()

/**
 * AssetIDNotFound: 'Invalid authority provided'
 *
 * @category Errors
 * @category generated
 */
export class AssetIDNotFoundError extends Error {
  readonly code: number = 0x1770
  readonly name: string = 'AssetIDNotFound'
  constructor() {
    super('Invalid authority provided')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, AssetIDNotFoundError)
    }
  }
}

createErrorFromCodeLookup.set(0x1770, () => new AssetIDNotFoundError())
createErrorFromNameLookup.set(
  'AssetIDNotFound',
  () => new AssetIDNotFoundError()
)

/**
 * UsernameTooLong: 'Username is too long'
 *
 * @category Errors
 * @category generated
 */
export class UsernameTooLongError extends Error {
  readonly code: number = 0x1771
  readonly name: string = 'UsernameTooLong'
  constructor() {
    super('Username is too long')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, UsernameTooLongError)
    }
  }
}

createErrorFromCodeLookup.set(0x1771, () => new UsernameTooLongError())
createErrorFromNameLookup.set(
  'UsernameTooLong',
  () => new UsernameTooLongError()
)

/**
 * URITooLong: 'URI is too long'
 *
 * @category Errors
 * @category generated
 */
export class URITooLongError extends Error {
  readonly code: number = 0x1772
  readonly name: string = 'URITooLong'
  constructor() {
    super('URI is too long')
    if (typeof Error.captureStackTrace === 'function') {
      Error.captureStackTrace(this, URITooLongError)
    }
  }
}

createErrorFromCodeLookup.set(0x1772, () => new URITooLongError())
createErrorFromNameLookup.set('URITooLong', () => new URITooLongError())

/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code: number): MaybeErrorWithCode {
  const createError = createErrorFromCodeLookup.get(code)
  return createError != null ? createError() : null
}

/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name: string): MaybeErrorWithCode {
  const createError = createErrorFromNameLookup.get(name)
  return createError != null ? createError() : null
}
