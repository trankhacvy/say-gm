/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { Audience, audienceBeet } from '../types/Audience'

/**
 * @category Instructions
 * @category CreatePost
 * @category generated
 */
export type CreatePostInstructionArgs = {
  postId: string
  metadataUri: string
  audience: beet.COption<Audience>
}
/**
 * @category Instructions
 * @category CreatePost
 * @category generated
 */
export const createPostStruct = new beet.FixableBeetArgsStruct<
  CreatePostInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['postId', beet.utf8String],
    ['metadataUri', beet.utf8String],
    ['audience', beet.coption(audienceBeet)],
  ],
  'CreatePostInstructionArgs'
)
/**
 * Accounts required by the _createPost_ instruction
 *
 * @property [_writable_] merkleTree
 * @property [_writable_, **signer**] authority
 * @property [] profile
 * @property [] compressionProgram
 * @property [] logWrapperProgram
 * @category Instructions
 * @category CreatePost
 * @category generated
 */
export type CreatePostInstructionAccounts = {
  merkleTree: web3.PublicKey
  authority: web3.PublicKey
  profile: web3.PublicKey
  compressionProgram: web3.PublicKey
  logWrapperProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createPostInstructionDiscriminator = [
  123, 92, 184, 29, 231, 24, 15, 202,
]

/**
 * Creates a _CreatePost_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreatePost
 * @category generated
 */
export function createCreatePostInstruction(
  accounts: CreatePostInstructionAccounts,
  args: CreatePostInstructionArgs,
  programId = new web3.PublicKey('undefined')
) {
  const [data] = createPostStruct.serialize({
    instructionDiscriminator: createPostInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.merkleTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.profile,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.compressionProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapperProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
