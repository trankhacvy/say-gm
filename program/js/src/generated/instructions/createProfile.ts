/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category CreateProfile
 * @category generated
 */
export type CreateProfileInstructionArgs = {
  username: string
  metadataUri: string
}
/**
 * @category Instructions
 * @category CreateProfile
 * @category generated
 */
export const createProfileStruct = new beet.FixableBeetArgsStruct<
  CreateProfileInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['username', beet.utf8String],
    ['metadataUri', beet.utf8String],
  ],
  'CreateProfileInstructionArgs'
)
/**
 * Accounts required by the _createProfile_ instruction
 *
 * @property [_writable_, **signer**] payer
 * @property [**signer**] authority
 * @property [_writable_] profile
 * @property [_writable_] treeConfig
 * @property [_writable_] merkleTree
 * @property [] logWrapper
 * @property [] compressionProgram
 * @category Instructions
 * @category CreateProfile
 * @category generated
 */
export type CreateProfileInstructionAccounts = {
  payer: web3.PublicKey
  authority: web3.PublicKey
  profile: web3.PublicKey
  treeConfig: web3.PublicKey
  merkleTree: web3.PublicKey
  systemProgram?: web3.PublicKey
  logWrapper: web3.PublicKey
  compressionProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createProfileInstructionDiscriminator = [
  225, 205, 234, 143, 17, 186, 50, 220,
]

/**
 * Creates a _CreateProfile_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateProfile
 * @category generated
 */
export function createCreateProfileInstruction(
  accounts: CreateProfileInstructionAccounts,
  args: CreateProfileInstructionArgs,
  programId = new web3.PublicKey('undefined')
) {
  const [data] = createProfileStruct.serialize({
    instructionDiscriminator: createProfileInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.profile,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treeConfig,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.merkleTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapper,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.compressionProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
